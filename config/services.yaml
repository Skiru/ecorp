parameters:

fos_oauth_server:
    db_driver: orm       # Drivers available: orm, mongodb, or propel
    client_class:        ECorp\Infrastructure\Persistence\Idp\Entity\Client
    access_token_class:  ECorp\Infrastructure\Persistence\Idp\Entity\AccessToken
    refresh_token_class: ECorp\Infrastructure\Persistence\Idp\Entity\RefreshToken
    auth_code_class:     ECorp\Infrastructure\Persistence\Idp\Entity\AuthCode
    service:
#        user_provider: null
        storage: ECorp\Infrastructure\Storage\IdpStorage
#        auth_code_manager:      fos_oauth_server.auth_code_manager.default
        options:
            access_token_lifetime: 86400
            refresh_token_lifetime: 1209600
            auth_code_lifetime: 30
            supported_scopes: profile

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    ECorp\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    ECorp\UI\:
        resource: '../src/UI/*'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    ECorp\Application\User\Command\UserRegisterCommandHandler:
        arguments: ['@ECorp\Infrastructure\Persistence\Repository\UserDbRepository', '@ECorp\Infrastructure\Persistence\Doctrine\Dbal\DbalUserQuery','@ECorp\Infrastructure\Persistence\Repository\UserAggregateRootRepository']

    ECorp\Application\User\Command\UserDeleteCommandHandler:
        arguments: ['@ECorp\Infrastructure\Persistence\Repository\UserDbRepository', '@ECorp\Infrastructure\Persistence\Doctrine\Dbal\DbalUserQuery']

    ECorp\Infrastructure\CommandBus\CommandBus:
        calls:
            - [registerHandler, ['ECorp\Application\User\Command\UserRegisterCommand', '@ECorp\Application\User\Command\UserRegisterCommandHandler']]
            - [registerHandler, ['ECorp\Application\User\Command\UserDeleteCommand', '@ECorp\Application\User\Command\UserDeleteCommandHandler']]

    ECorp\Infrastructure\Storage\IdpStorage:
        arguments:
            $userProvider: '@ECorp\Infrastructure\Security\User\IdpUserProvider'